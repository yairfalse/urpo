[workspace]
members = ["src-tauri"]
resolver = "2"

[package]
name = "urpo_lib"
version = "0.1.0"
edition = "2021"
rust-version = "1.70"
license = "MIT OR Apache-2.0"
description = "Terminal-native OTEL trace explorer with real-time service health"
repository = "https://github.com/user/urpo"
keywords = ["observability", "tracing", "opentelemetry", "terminal", "tui"]
categories = ["command-line-utilities", "development-tools::debugging"]

[dependencies]
# Core async runtime
tokio = { version = "1.40", features = ["rt-multi-thread", "net", "sync", "time", "macros", "signal", "fs"] }
futures = "0.3"  # Futures utilities for streams

# OTEL and GRPC
tonic = { version = "0.12", features = ["transport"] }
prost = "0.13"
opentelemetry = "0.26"
opentelemetry-proto = { version = "0.26", features = ["gen-tonic"] }
opentelemetry-semantic-conventions = "0.26"

# HTTP Server for OTLP/HTTP
axum = { version = "0.7", features = ["json"] }
tower = "0.4"
tower-http = { version = "0.5", features = ["cors", "trace"] }
hyper = { version = "1.0", features = ["full"] }

# Terminal UI
ratatui = "0.29"
crossterm = "0.28"

# CLI
clap = { version = "4.5", features = ["derive", "env"] }

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde_yaml = "0.9"
humantime-serde = "1.1"

# Error handling
thiserror = "1.0"
anyhow = "1.0"

# Data structures
dashmap = "6.1"
arc-swap = "1.7"

# Utilities
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
chrono = { version = "0.4", features = ["serde"] }
bytes = "1.7"
rand = "0.8"
hex = "0.4"
async-trait = "0.1"
dirs = "5.0"
notify = "6.1"
regex = "1.10"

# EXTREME PERFORMANCE OPTIMIZATIONS - OTEL FOCUSED
roaring = "0.10"  # Compressed bitmaps for instant filtering
memmap2 = "0.9"  # Memory-mapped files for huge datasets
rayon = "1.10"  # Parallel processing
parking_lot = "0.12"  # Faster locks than std
ahash = "0.8"  # Faster hashing - MUCH faster than default
rkyv = { version = "0.7", features = ["validation", "archive_le"], optional = true }  # Zero-copy serialization
lz4 = "1.28"  # Fast compression for cold storage
lz4_flex = "0.11"  # Fast LZ4 compression/decompression
bincode = "1.3"  # Binary serialization
rocksdb = { version = "0.22", optional = true }  # Optional persistent storage
crossbeam-channel = "0.5"  # Lock-free channels for trace ingestion
crossbeam = "0.8"  # Full crossbeam suite including ArrayQueue
speedy = "0.8"  # Even faster serialization than bincode
object-pool = "0.4"  # Object pooling for performance
once_cell = "1.19"  # Lazy static replacement

# Additional performance dependencies from CLAUDE.md
mimalloc = { version = "0.1", default-features = false }  # Ultra-fast allocator
rustc-hash = "2.0"  # Fast hashing
fastrand = "2.0"  # Fast random numbers
bumpalo = "3.0"  # Arena allocation
smallvec = { version = "1.13", features = ["union", "const_generics", "const_new", "serde"] }  # Stack-allocated small vectors
lru = "0.12"  # LRU cache for bounded memory
clipboard = { version = "0.5", optional = true }  # Clipboard support for TUI


[dev-dependencies]
tempfile = "3.0"
wiremock = "0.6"
criterion = "0.5"
pretty_assertions = "1.4"
opentelemetry-otlp = { version = "0.26", features = ["tonic", "trace"] }
reqwest = { version = "0.11", features = ["json"] }
opentelemetry_sdk = { version = "0.26", features = ["rt-tokio"] }
tracing-subscriber = "0.3"

[build-dependencies]
tonic-build = "0.12"

[features]
default = []
persistent = ["rocksdb"]
rkyv = ["dep:rkyv"]
clipboard = ["dep:clipboard"]  # Clipboard functionality for TUI

[lib]
name = "urpo_lib"
crate-type = ["lib"]

[[bin]]
name = "urpo"
path = "src/main.rs"

[[bench]]
name = "span_processing"
harness = false

[[bench]]
name = "hot_path"
harness = false

[profile.release]
lto = "fat"              # Full link-time optimization
codegen-units = 1        # Better optimization
panic = "abort"          # Smaller binary, faster panic
opt-level = 3            # Maximum optimization
debug = false            # No debug info in release
strip = true             # Strip symbols for smaller binary
overflow-checks = false  # Disable overflow checks for maximum speed

[profile.bench]
inherits = "release"
debug = true             # Keep debug info for profiling

# Clippy lints for performance-focused development
[lints.clippy]
# Performance-critical lints (DENY level)
unnecessary_to_owned = "deny"
clone_on_ref_ptr = "deny"
redundant_clone = "deny"
inefficient_to_string = "deny"
string_add = "deny"
large_types_passed_by_value = "deny"
boxed_local = "deny"
mutex_atomic = "deny"
arc_with_non_send_sync = "deny"
manual_memcpy = "deny"

# Performance warnings
cast_possible_truncation = "warn"
cast_precision_loss = "warn"
arithmetic_side_effects = "warn"
iter_nth = "warn"
single_match_else = "warn"
cognitive_complexity = "warn"

# Style lints for maintainability
len_without_is_empty = "deny"
needless_bool = "deny"
bool_comparison = "deny"
explicit_iter_loop = "warn"

# Allow performance-oriented patterns
expect_used = "allow"
unwrap_used = "allow"
panic = "allow"
comparison_chain = "allow"
match_bool = "allow"
similar_names = "allow"
unreadable_literal = "allow"
redundant_else = "allow"
unnested_or_patterns = "allow"